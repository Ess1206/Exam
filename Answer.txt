Принципы ООП (написать что каждый из себя представляет) 

Инкопсуляция:
сокрытие реализации функционала, от основного кода, это делает код более читабельным , а также не дает возможности менять ту реализацию, которую разработчие посчитает важной-незменяемой

Полеморфизм:



Наследование:
возможность использовать уже готовые методы, классы , что позволяет расширить функционал новых класов на основе наследуемых


Абстракция
возможность создавать абстактные классы , для реализации их во время наследвания

----------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
Модификаторы доступа, область видимости каждого:

Public - доступен всем наследникам внутри и снаружи пакета 

Privite - доступен наследникам внутри пакета (класса)

Protected - модификатор доступа по умолчанию, доступен всем наследникам внутри пакета

-----------------------------------------------------------------------------------------------------------------------------------------------------------------------------

Пример полиморфизма в java 
-----------------------------------------------------------------------------------------------------------------------------------------------------------------------------

Что такое static ?

описание неизменяемой переменной , метода 

-----------------------------------------------------------------------------------------------------------------------------------------------------------------------------

String методы (5 - 10 шт) - что делают?

length() - длина строки.
equals() - сравнение строк
isEmpty() - проверка на наличие строки.
indexOf() - возвращает эллемент по индексу в строке
trim()	- удаляет проблы в строке
toLowerCase() - все буквенные символы строки переводяться в нижний регистр 

-----------------------------------------------------------------------------------------------------------------------------------------------------------------------------
Отличие String, StringBuilder, StringBuffer (вкратце) 

Изменение строк:
String не изменяем, при изменениии создается новая строка

StringBuilder, StringBuffer (вкратце) - есть возможноть денамически менять строку, + дополнительные методы 
-----------------------------------------------------------------------------------------------------------------------------------------------------------------------------


Что такое this (пример использования)
обращние к private переменной класса 
    public static class Exmample {

        private String name;
		
        public void setName(String name) {
            this.name = name;
        }
    }

-----------------------------------------------------------------------------------------------------------------------------------------------------------------------------
	
Что такое super (пример использования)

обращения к базоваму классу.

-----------------------------------------------------------------------------------------------------------------------------------------------------------------------------


Что такое конструктор класса? Когда он вызывается? Пример конструктора 

методы класса, которые вызываются при обьявлении нового экземпляра класса

public class Constructor {
    public Constructor(String string) {
        System.out.println(string);
    }
}

-----------------------------------------------------------------------------------------------------------------------------------------------------------------------------
Чем отличается Абстрактный класс и Интерфейс

абстактный класс не содержит реализации методо
Интерфейс содержит хотябы оду реализацию метода

-----------------------------------------------------------------------------------------------------------------------------------------------------------------------------

Отличия ArrayList от LinkedList
скорость добавления нового эллемента в соллекцию
скорость поиска первого и последнего эллемента у LinkedList выше 
-----------------------------------------------------------------------------------------------------------------------------------------------------------------------------

Реализации коллекции Set, их отличия.
отличия заключаются в реализации сортровки элементов коллекции
	
        Set<String> objects = new HashSet<>(); - сортировка по адресу занимаемой памяти 
        Set<String> objects1= new TreeSet<>();  - сортировка по алфавиту
        Set<String> objects2= new LinkedHashSet<>(); - сортировка по индексу
		
-----------------------------------------------------------------------------------------------------------------------------------------------------------------------------

Итерация по Map. (Пример)

-----------------------------------------------------------------------------------------------------------------------------------------------------------------------------
Есть List<String> names. Удалить из него все элементы включающие букву “S”

public class Main {
    public static void main(String[] args) {
        List<String> names = new ArrayList<>();
        names.add("Stas");
        names.add("Kola");
        names.add("Vola");
        names.add("Dima");
        names.add("Petia");
        for (int i = 0; i <4 ; i++) {
            if (names.get(i).contains("S")){
                names.remove(i);
            }
        }
        System.out.println(" " + names);

    }
}
-----------------------------------------------------------------------------------------------------------------------------------------------------------------------------

Отсортировать список имен по убыванию. 
public class Main {
 
 public static void main(String[] args) {

        List<String> names = new ArrayList<>();
        names.add("Stas");
        names.add("Kola");
        names.add("Vola");
        names.add("Dima");
        names.add("Petia");     
        names.sort(String::compareTo);
        System.out.println(" " + names);
    }
}	

-----------------------------------------------------------------------------------------------------------------------------------------------------------------------------

Что такое break? Пример использования.

выход из цикла 

   public void getBrake(){
        for (int i = 0; i < 10 ; i++) {
            System.out.println(i+ " ");
            if (i == 3 ) break;
        }
    }
-----------------------------------------------------------------------------------------------------------------------------------------------------------------------------


Что такое return? Примеры

возвращает результат.

    public String getReturn(){
       String string = null;
        for (int  i = 0; i < 10 ; i++) {
            System.out.println(i+ " ");
            if (i == 3 ) break;
            string = " " + i;
        }
        return string;
    }
}

-----------------------------------------------------------------------------------------------------------------------------------------------------------------------------

Рекурсия, пример использования.

метод который вызывает сам себя

реализация Факториала 

-----------------------------------------------------------------------------------------------------------------------------------------------------------------------------

Exceptions (Какие бывают? Когда может возникнуть NullPointerException?) 

исключения - ошибки при работе программы 

NullPointerException - при попытки отредактировать не существующий фаил .
-----------------------------------------------------------------------------------------------------------------------------------------------------------------------------

Варианты обработки Exceptions (примеры кода)

public class brakeMehods {
    @Test
    public void openFile() throws IOException {
        Scanner scanner = new Scanner(File.createTempFile("qqq","txt"));
    }
}

-----------------------------------------------------------------------------------------------------------------------------------------------------------------------------

Слово final в Классах, методах (что означает ?)

метод / класс не наследуемый

-----------------------------------------------------------------------------------------------------------------------------------------------------------------------------
Что означает void в методе?
	Метод выполняется но ничего не возвращает 
	
-----------------------------------------------------------------------------------------------------------------------------------------------------------------------------
Суть PageObject паттерна 
	
	реализация функционала на основе шаблона 
	
-----------------------------------------------------------------------------------------------------------------------------------------------------------------------------

Перегрузка метода (пример)

	public class Do extends OverWrideMethods {
    @Override
    public void OverWrideMethods0() {
        super.OverWrideMethods0();
    }

    @Override
    public void OverWrideMethods1() {
        super.OverWrideMethods1();
    }



Переопределение метода (пример)

abstract public class  OverWrideMethods {

    public void OverWrideMethods0(){}
    public void OverWrideMethods1(){   }

    public String reloadString(){
        String s = "1  "+ " 2 " ;
        return s;
    }
    public abstract String reloadString(int i);
}

class getOverload extends OverWrideMethods {
    @Override
    public String reloadString(int i) {
       String string = i + " = i";
        
        return string;
    }
}


Написать тест который будет использовать @DataProvider (вывод на экран параметра из датаПровайдера).

Написать метод который будет дожидаться появления 2го окна в браузере 10 секунд. (если окно появилось раньше, то переключиться на данное окно)

Get запрос на http://jsonplaceholder.typicode.com/posts
JSON to Java class (Из запроса выше, Создать класс-модель для данного jsona )
Java class to JSON (Из запроса выше, класс в виде JSON(а))